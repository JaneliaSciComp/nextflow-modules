params {
    user_id = getUID()

    input_image_subpath = 'c1/s5'
    outdir = './output'
    cellpose_models_dir = './output/cellpose-models'
    output_image_dir = './output/cellpose'
    cellpose_work_dir = ''
    output_image_name = 'seg.n5'
    dask_work_dir = './output/dask'
    process_blocksize = '32,32,16'
    output_blocksize = '8,8,8'
    distributed = true
    model = 'cyto'
    diameter = 10
    blocks_overlap = '4,4,4'
    cellprob_threshold = 1.0
    cellpose_eval_channels = '0,0'
    dask_config = './tests/pipelines/janelia/cellpose/dask_config.yml'
    cellpose_workers = 3
    cellpose_worker_threads = 3
    cellpose_required_workers = 1
    cellpose_worker_cpus = 0.6
    cellpose_worker_mem_gb = 6
    cellpose_driver_cpus = 0.5
    cellpose_driver_mem_gb = 10
    min_size = 10
    iou_depth = 1
    iou_threshold = 0.1
    device = '0'
    use_gpu = true
    runtime_opts = ''
    save_intermediate_labels = true
    shrink_labels_to_merge = false
    logging_config = 'tests/pipelines/janelia/cellpose/logging_config.ini'
}

process {
    publishDir = { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" }

    ext.container = 'ghcr.io/janeliascicomp/cellpose:3.1.0-dask2025.1.0-py12'

    withName:".*:DASK_STARTWORKER" {
        ext {
            args = [
                "--nthreads ${params.cellpose_worker_threads}",
            ].join(' ')
        }
    }

    withName:CELLPOSE {
        ext {
            args = [
                "--process-blocksize ${params.process_blocksize}",
                "--output-blocksize ${params.output_blocksize}",
                "--model ${params.model}",
                "--cellprob_threshold ${params.cellprob_threshold}",
                "--diam_mean ${params.diameter}",
                "--blocks-overlaps ${params.blocks_overlap}",
                "--eval-channels ${params.cellpose_eval_channels}",
                "--min_size ${params.min_size}",
                "--device ${params.device}",
                "--iou-threshold ${params.iou_threshold}",
                "${params.use_gpu ? '--use_gpu' : ''}",
                "${params.save_intermediate_labels ? '--save-intermediate-labels' : ''}",
                "${params.shrink_labels_to_merge ? '--shrink-labels-to-merge' : ''}",
            ].join(' ')
        }
    }
}

docker {
    temp = 'auto'
    runOptions = "${params.runtime_opts} -u ${params.user_id}"
}

singularity {
    singularity.autoMounts = true
}

profiles {
    docker {
        docker.enabled = true

        process {
            withName:'.*:DASK_STARTMANAGER' {
                cpus = 0.5
                memory = '1 GB'
                containerOptions = "-p 8787:8787 -p 8786:8786"
            }
        }
    }
}

def getUID() {
    def p = Runtime.getRuntime().exec('id -u')
    try (InputStreamReader pout = new InputStreamReader(p.inputStream)) {
        pout.readLine() as Integer
    }
}
